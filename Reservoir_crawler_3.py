# Generated by Selenium IDE
# import pytest
import matplotlib.pyplot as plt
import calendar
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.ui import Select
from urllib3.packages.six import b
from matplotlib.font_manager import FontProperties


class Reservoir_data():
  webURL = "https://fhy.wra.gov.tw/reservoirpage_2011/storagecapacity.aspx?fbclid=IwAR0Umtyt_LvN6dMNeH5SKTsXTB0XyTUA974FClxePe8pLD-grqizWg5Gu1Y"

  def __init__(self):
    # driver setup
    self.options = webdriver.ChromeOptions()
    self.options.add_experimental_option('excludeSwitches', ['enable-logging'])
    self.driver = webdriver.Chrome(options=self.options)
    self.driver.get(Reservoir_data.webURL)
    self.driver.set_window_size(320,180)
  
  def refresh(self):
    self.driver.get(Reservoir_data.webURL)

  def exit(self):
    self.driver.quit()

  def crawl(self, reservoir_name, date):
    '''
    reservoir  format: "XXX水庫"
    date        format: tuple/set/list (YYYY, MM, DD), and the numbers shouldn't contain leading zero!!!!
    '''
    
    # #select search domain: 所有水庫
    # self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_cboSearch")).select_by_visible_text('所有水庫')
    # time.sleep(0.5)

    #select year
    self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboYear")).select_by_visible_text(str(date[0]))
    #select month
    self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboMonth")).select_by_visible_text(str(date[1]))
    #select day
    self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboDay")).select_by_visible_text(str(date[2]))

    #search and wait a second (literally)
    self.driver.find_element(By.ID, "ctl00_cphMain_btnQuery").click()
    time.sleep(0.3)

    '''印出所有水庫的資料
    self.table = self.driver.find_element_by_id('ctl00_cphMain_gvList')
    self.trlist = self.table.find_elements_by_tag_name('tr')[:-1]
    for row in self.trlist:
      self.tdlist = row.find_elements_by_tag_name('td')
      for col in self.tdlist:
        print(col.text + '\t',end='')
      print('\n')
    # 印出所有水庫的資料'''

    # '''return 個別水庫的資料
    self.table = self.driver.find_element_by_id('ctl00_cphMain_gvList')
    self.reservoir = self.table.find_element_by_xpath('//tr[contains(.,"'+ reservoir_name +'")]').find_elements_by_tag_name('td')
    
    self.data = []
    for col in self.reservoir: 
      self.data.append(col.text)

    return self.data
    # return 個別水庫的資料'''

def data_generator(name, year, month, choice):  
  #choice is from 1 to 7.
  
  data = []  
  days = calendar.monthrange(year, month)[1]
  original = Reservoir_data()

  for day in range(1, days + 1):
    successor = original.crawl(name, (year, month, day))
    time.sleep(0.5)
    del successor[0:3]
    del successor[4]
    successor[choice - 1] = successor[choice - 1].replace(",", "").replace("%","")
    data.append(float(successor[choice - 1]))

  return data

unit_list = ["毫米","萬立方公尺","萬立方公尺","公尺","公尺","萬立方公尺","%"]
title_list = ["集水區降雨量","進水量","出水量","與昨日水位差","水位","有效蓄水量","蓄水量百分比"]



name = input("Name: ")
year = input("Year: ")
month = input("Month: ")

print('|choice | 資料種類')
for i in range(7):
  print('|     {} | {}({})'.format(i+1, title_list[i], unit_list[i]))

choice = input("Choice: ")

year = int(year)
month = int(month)
choice = int(choice)
data = data_generator(name, year, month, choice)
x = [i + 1 for i in range(calendar.monthrange(year, month)[1])]

plt.rcParams['font.sans-serif'] = ['Microsoft JhengHei']
plt.rcParams['axes.unicode_minus'] = False
plt.title(name + " {}年{}月 每日{}({})".format(year, month, title_list[choice-1], unit_list[choice-1]))
plt.xlabel("天")
plt.ylabel("{}({})".format(title_list[choice-1], unit_list[choice-1]))
plt.plot(x, data)
plt.show()