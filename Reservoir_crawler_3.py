# Generated by Selenium IDE
# import pytest
import matplotlib.pyplot as plt
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
import tkinter as tk
from tkinter import ttk
from datetime import date, timedelta
from tqdm import tqdm

nameList = ['石門水庫', '翡翠水庫', '寶山第二水庫', '永和山水庫', '明德水庫', '鯉魚潭水庫', '德基水庫', '石岡壩', '霧社水庫', '日月潭水庫', '集集攔河堰', '湖山水庫', '仁義潭水庫', '白河水庫', '烏山頭水庫', '曾文水庫', '南化水庫', '阿公店水庫', '高屏溪攔河堰', '牡丹水庫']
dayList = [i + 1 for i in range(31)]
monthList = [i + 1 for i in range(12)]
yearList = [i for i in range(2022,1969,-1)]
unitList = ["毫米","萬立方公尺","萬立方公尺","公尺","公尺","萬立方公尺","%"]
titleList = ["集水區降雨量","進水量","出水量","與昨日水位差","水位","有效蓄水量","蓄水量百分比"]
webURL = "https://fhy.wra.gov.tw/reservoirpage_2011/storagecapacity.aspx"

class Window:
    class SelectBox():
        def __init__(self, root, _list, init):
            self.Box=ttk.Combobox(root,textvariable=tk.StringVar()) 
            self.Box["values"] = _list
            self.Box.current(init)
            self.Box.pack()

    def __init__(self, title='Water Reservoir Crawling System', geometry='320x320'):
        # open a window
        self.root = tk.Tk()
        self.root.title(title)
        self.root.geometry(geometry)

        # name list
        tk.Label(self.root, text = "Select Water Reservoir Name").pack()
        self.nameBox = self.SelectBox(self.root, nameList, 3)

        # choice list
        tk.Label(self.root, text = "Select Plot Variable").pack()
        self.choiceBox = self.SelectBox(self.root, [a +'（'+ b +'）' for a, b in zip(titleList, unitList)], 6)

        # start year/month/day list
        tk.Label(self.root, text = "Select Start Date").pack()
        self.startYearBox = self.SelectBox(self.root, yearList, 1)
        self.startMonthBox = self.SelectBox(self.root, monthList, 6)
        self.startDayBox = self.SelectBox(self.root, dayList, 0)

        # end year/month/day list
        tk.Label(self.root, text = "Select End Date").pack()
        self.endYearBox = self.SelectBox(self.root, yearList, 1)
        self.endMonthBox = self.SelectBox(self.root, monthList, 7)
        self.endDayBox = self.SelectBox(self.root, dayList, 0)

        # close the window
        self.search_button = tk.Button(self.root, text = 'Search', command=self.quit)
        self.search_button.pack()

        self.root.mainloop()

    def quit(self):
        self.name = self.nameBox.Box.get()
        self.startDate = date(int(self.startYearBox.Box.get()), int(self.startMonthBox.Box.get()), int(self.startDayBox.Box.get()))
        self.endDate = date(int(self.endYearBox.Box.get()), int(self.endMonthBox.Box.get()), int(self.endDayBox.Box.get())) 
        self.choice = self.choiceBox.Box.current()
        self.root.destroy()


class Reservoir_crawing_system():
    def __init__(self):
        # driver setup
        self.options = webdriver.ChromeOptions()
        self.options.add_experimental_option('excludeSwitches', ['enable-logging'])
        self.options.add_argument('headless')
        self.driver = webdriver.Chrome(options=self.options)
        self.driver.get(webURL)
        self.driver.set_window_size(320,180)
  
    def exit(self):
        self.driver.quit()

    def crawl_reservoir_names(self):
        table = self.driver.find_element_by_id('ctl00_cphMain_gvList')
        trlist = table.find_elements_by_tag_name('tr')[2:-1]
        namelist = []
        for row in trlist:
            namelist.append(row.find_elements_by_tag_name('td')[0].text)
    
        return namelist

    def print_entire_table(self, _date):
        #select year
        self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboYear")).select_by_visible_text(str(_date.year))
        #select month
        self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboMonth")).select_by_visible_text(str(_date.month))
        #select day
        self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboDay")).select_by_visible_text(str(_date.day))

        #search and wait a second (literally)
        self.driver.find_element(By.ID, "ctl00_cphMain_btnQuery").click()
        time.sleep(0.5)

        table = self.driver.find_element_by_id('ctl00_cphMain_gvList')
        trlist = table.find_elements_by_tag_name('tr')[:-1]
        for row in trlist:
            tdlist = row.find_elements_by_tag_name('td')
            for col in tdlist:
                print(col.text + '\t',end='')
        print('\n')


    def crawl_single_reservoir(self, _date):
        #select year
        self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboYear")).select_by_visible_text(str(_date.year))
        #select month
        self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboMonth")).select_by_visible_text(str(_date.month))
        #select day
        self.dropdown = Select(self.driver.find_element(By.ID, "ctl00_cphMain_ucDate_cboDay")).select_by_visible_text(str(_date.day))
        
        #search and wait a second (literally)
        self.driver.find_element(By.ID, "ctl00_cphMain_btnQuery").click()
        time.sleep(0.5)

        table = self.driver.find_element_by_id('ctl00_cphMain_gvList')
        reservoir = table.find_element_by_xpath('//tr[contains(.,"'+ self.window.name +'")]').find_elements_by_tag_name('td')

        data = []
        for col in reservoir: data.append(col.text)
        return data


    def data_generator(self):  

        def daterange(date1, date2):
            for n in range(int((date2 - date1).days)+1):
                yield date1 + timedelta(n)
       
        data = []
        progress = tqdm(total=(self.window.endDate - self.window.startDate).days+1)
        for _date in daterange(self.window.startDate, self.window.endDate):
            successor = self.crawl_single_reservoir(_date)
            time.sleep(0.5)
            del successor[0:3]
            del successor[4]
            data.append(float(successor[self.window.choice].replace(",", "").replace("%","") ))
            progress.update(1)

        print('\nData Crawling Process Finish')
        self.exit()
        return data

    def Plot(self):
        # GUI setup
        self.window = Window()
        data = self.data_generator()
        abscissa = [i + 1 for i in range(len(data))]

        plt.rcParams['font.sans-serif'] = ['Microsoft JhengHei']
        plt.rcParams['axes.unicode_minus'] = False
        plt.title("{} 至 {}\n {}：每日{}（{}）".format(    self.window.startDate.strftime('%Y/%m/%d'),
                                                        self.window.endDate.strftime('%Y/%m/%d'), self.window.name,
                                                        titleList[self.window.choice], unitList[self.window.choice]))
        plt.xlabel("天")
        plt.ylabel("{}({})".format(titleList[self.window.choice], unitList[self.window.choice]))
        plt.plot(abscissa, data)
        plt.show()


TestA = Reservoir_crawing_system()

TestA.Plot()